#BlueJ class context
comment0.target=HuffmanTree
comment1.params=
comment1.target=HuffmanTree()
comment10.params=rootData
comment10.target=void\ setRootData(SymbolFrequencyPacket)
comment11.params=rootNode
comment11.target=void\ setRootNode(HuffmanNode)
comment12.params=
comment12.target=HuffmanNode\ getRootNode()
comment13.params=
comment13.target=int\ getHeight()
comment14.params=
comment14.target=int\ getNumberOfNodes()
comment15.params=
comment15.target=void\ inorderTraverse()
comment16.params=node
comment16.target=void\ inorderTraverse(HuffmanNode)
comment17.params=
comment17.target=java.util.Iterator\ getInorderIterator()
comment17.text=\ create\ an\ inorder\ iterator\r\n\ return\ the\ iterator\r\n
comment18.params=
comment18.target=java.util.Iterator\ getPreorderIterator()
comment19.params=
comment19.target=java.util.Iterator\ getPostorderIterator()
comment2.params=rootData
comment2.target=HuffmanTree(SymbolFrequencyPacket)
comment20.params=
comment20.target=java.util.Iterator\ getLevelOrderIterator()
comment21.params=
comment21.target=SymbolFrequencyPacket\ getCurrentData()
comment21.text=\ \r\n\ Get\ the\ symbol/frequency\ for\ the\ current\ node\ in\ the\ Huffman\ tree.\r\n\ @return\ The\ object\ of\ type\ SymbolFrequencyPacket\ being\ held\ at\ the\ current\ node.\r\n
comment22.params=
comment22.target=boolean\ isSingleSymbol()
comment22.text=\ \r\n\ Determine\ whether\ current\ node\ contains\ a\ single\ code\ letter.\r\n\ @return\ true\ if\ the\ current\ node\ is\ a\ leaf\ \r\n
comment23.params=
comment23.target=void\ advanceLeft()
comment23.text=\r\n\ Moves\ the\ current\ node\ to\ the\ left\ child\ of\r\n\ the\ current\ node.\ \r\n
comment24.params=
comment24.target=void\ advanceRight()
comment24.text=\r\n\ Moves\ the\ current\ node\ to\ the\ right\ child\ of\r\n\ the\ current\ node.\ \r\n
comment25.params=symbol
comment25.target=boolean\ checkLeft(java.lang.Object)
comment25.text=\ \r\n\ Check\ the\ node\ to\ the\ left\ of\ the\ current\ node\ to\ see\ if\ a\ symbol\ is\ there.\r\n\ @param\ symbol\ the\ symbol\ to\ look\ for\ \r\n\ @return\ true\ if\ the\ symbol\ is\ on\ the\ left\r\n
comment26.params=symbol
comment26.target=boolean\ checkRight(java.lang.Object)
comment26.text=\ \r\n\ Check\ the\ node\ to\ the\ right\ of\ the\ current\ node\ to\ see\ if\ a\ symbol\ is\ there.\r\n\ @param\ symbol\ the\ symbol\ to\ look\ for\ \r\n\ @return\ true\ if\ the\ symbol\ is\ on\ the\ right\r\n
comment27.params=
comment27.target=void\ reset()
comment27.text=\ \r\n\ Sets\ the\ current\ node\ to\ the\ root\ of\ the\ tree.\r\n
comment28.params=
comment28.target=void\ clearHighLights()
comment28.text=\ \r\n\ Clear\ the\ highLights\ of\ the\ tree.\r\n
comment29.params=g\ leftX\ rightX\ topCenterY
comment29.target=void\ drawOn(java.awt.Graphics,\ int,\ int,\ int)
comment29.text=\r\n\ draw\ a\ representation\ of\ the\ Huffman\ tree\ at\r\n\ the\ given\ location\r\n\ \r\n\ @param\ \ \ g\ \ the\ graphics\ context\ to\ draw\ on\ \ \ \r\n\ @param\ \ \ leftX\ \ x\ left\ boundary\ to\ use\r\n\ @param\ \ \ rightX\ \ x\ right\ boundary\ to\ use\r\n\ @param\ \ \ topCenterY\ \ \ y\ position\ of\ center\ of\ top\ node\r\n\ \r\n
comment3.params=rootData\ leftTree\ rightTree
comment3.target=HuffmanTree(SymbolFrequencyPacket,\ HuffmanTree,\ HuffmanTree)
comment30.params=g\ top\ leftX\ rightX\ topCenterY
comment30.target=void\ drawOnAux(java.awt.Graphics,\ HuffmanNode,\ int,\ int,\ int)
comment30.text=\r\n\ recursively\ draw\ the\ nodes\ and\ structure\ of\ the\ tree\r\n\ \r\n\ @param\ \ \ g\ \ the\ graphics\ context\ to\ draw\ on\ \r\n\ @param\ \ \ top\ the\ top\ of\ the\ current\ tree\ in\ the\ recursion\r\n\ @param\ \ \ leftX\ \ x\ left\ boundary\ to\ use\r\n\ @param\ \ \ rightX\ \ x\ right\ boundary\ to\ use\r\n\ @param\ \ \ topCenterY\ \ y\ position\ of\ center\ of\ top\ node\r\n\ \r\n
comment4.params=rootData
comment4.target=void\ setTree(SymbolFrequencyPacket)
comment5.params=rootData\ leftTree\ rightTree
comment5.target=void\ setTree(SymbolFrequencyPacket,\ BinaryTreeInterface,\ BinaryTreeInterface)
comment6.params=rootData\ leftTree\ rightTree
comment6.target=void\ privateSetTree(SymbolFrequencyPacket,\ HuffmanTree,\ HuffmanTree)
comment7.params=
comment7.target=SymbolFrequencyPacket\ getRootData()
comment8.params=
comment8.target=boolean\ isEmpty()
comment9.params=
comment9.target=void\ clear()
numComments=31
